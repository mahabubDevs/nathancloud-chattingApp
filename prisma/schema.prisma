generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  email             String         @unique
  phoneNumber       String
  password          String
  fcmToken          String?        @default("")
  role              UserRole       @default(USER)
  isPayment         Boolean        @default(false)
  customerId        String?        @default("")
  priceId           String?
  planName          String?
  subscriptionId    String?
  otp               Int?
  name              String?
  ethnicity         String?        @default("")
  lat               String?
  long              String?
  gender            String?
  facebook          String         @default("")
  twitter           String         @default("")
  instagram         String         @default("")
  linkedin          String         @default("")
  tiktok            String         @default("")
  dob               DateTime?
  hight             String?
  weight            String?
  sexOrientation    String?
  education         String?
  distance          String?
  interest          String[]
  favoritesFood     String[]
  photos            Json?
  about             String?
  status            UserStatus     @default(INACTIVE)
  expirationOtp     DateTime?
  isCompleteProfile Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  receiver          Notification[] @relation("Receiver")
  sender            Notification[] @relation("Sender")
  likesSent         Like[]         @relation("sender")
  likesReceived     Like[]         @relation("receiver")
  disLikeSend       DisLike[]      @relation("sender")
  disLikeReceived   DisLike[]      @relation("receiver")
  SuperLikeSend     SuperLike[]    @relation("sender")
  SuperLikeReceived SuperLike[]    @relation("receiver")
  roomsSent         Room[]         @relation("SenderRelation")
  roomsReceived     Room[]         @relation("ReceiverRelation")
  chatsSent         Chat[]         @relation("SenderRelation")
  chatsReceived     Chat[]         @relation("ReceiverRelation")
  events            Event[]        @relation("User")
  Review            Review[]
  // Groups            Group[]        @relation("GroupMembers")

  groupMembers      GroupMember[]  @relation("GroupMembers")

  @@map("users")
}

model Event {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  address     String
  lat         Float
  long        Float
  description String
  startDate   String
  endDate     String
  startTime   String
  endTime     String
  visibility  eventVisibility @default(PUBLIC)
  role        String          @default("event")
  userId      String          @db.ObjectId
  Review      Review[]

  user      User     @relation("User", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model Price {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  name          String
  priceId       String
  productId     String
  features      Json
  description   String?
  currency      String
  interval      String
  active        Boolean
  intervalCount Int
  freeTrailDays Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("prices")
}

model PaymentInfo {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userEmail          String?
  subscriptionPlane  String?
  subscriptionId     String?
  date               DateTime?
  amount             Float?
  tranId             String?
  status             String?
  hosted_invoice_url String?
  invoice_pdf        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("paymentInfos")
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String   @db.ObjectId
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  title      String
  body       String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notifications")
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("likes")
}

model DisLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("disLikes")
}

model SuperLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("superLikes")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  message    String
  roomId     String   @db.ObjectId
  images     String[]
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("chats")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  chat       Chat[]

  @@map("rooms")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  eventId   String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

enum UserRole {
  ADMIN
  ARTIST
  FAN
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum eventVisibility {
  PRIVATE
  PUBLIC
}




// testing group creation and chatting

model Group {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  visibility  String   @default("PUBLIC") // or PRIVATE
  // description String?
  // image       String?
  createdBy  String   @db.ObjectId 
  updatedBy   DateTime @updatedAt
  members     GroupMember[]   @relation("GroupMembers")
  chats       GroupMessage[]   @relation("GroupChats")

  @@map("groups") 
}

model GroupMember {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String   @db.ObjectId
  userId     String   @db.ObjectId
  addedBy   String   @db.ObjectId
  addedAt   DateTime @default(now())
 // User ID of the person who added this member
  group      Group    @relation("GroupMembers", fields: [groupId], references: [id])
  user       User     @relation(name:"GroupMembers",fields: [userId], references: [id])
  chat    GroupMessage[] 

  @@map("groupMembers")
}

model GroupMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String   @db.ObjectId
  senderId   String   @db.ObjectId
  message    String
  images     String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  group      Group    @relation("GroupChats", fields: [groupId], references: [id])
  sender     GroupMember     @relation(fields: [senderId], references: [id])


}